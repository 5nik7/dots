"$schema" = 'https://starship.rs/config-schema.json'

command_timeout = 10000
add_newline = true
follow_symlinks = false
continuation_prompt = '[│](black)'

format = """\
(${custom.git_before}\
${custom.git_remote_symbol-pwsh} \
\
\
${custom.git_remote_symbol-bash} \
${custom.git_remote_url}\
(${custom.git_remote_repo}[](fg:color_git_remote_url dimmed))\
${custom.git_local}\
([/](fg:color_repo)${custom.git_prefix}) \
$git_branch\
$git_commit\
$git_status\
$git_metrics\
$git_state)\
$os\
$username\
$hostname\
$directory\
$nodejs$conda$python$rust$lua\
$cmd_duration\
$fill\
$time\
$line_break\
$character"""
# (${custom.btry} )\

right_format = """${custom.btry}"""

palette = "default"

[palettes.default]

rosewater = "#f5e0dc"
flamingo = "#f2cdcd"
pink = "#f5c2e7"
mauve = "#cba6f7"
red = "#f38ba8"
maroon = "#eba0ac"
peach = "#fab387"
yellow = "#f9e2af"
green = "#a6e3a1"
teal = "#94e2d5"
sky = "#89dceb"
sapphire = "#74c7ec"
blue = "#89b4fa"
lavender = "#b4befe"
text = "#cdd6f4"
subtext1 = "#bac2de"
subtext0 = "#a6adc8"
overlay2 = "#9399b2"
overlay1 = "#7f849c"
overlay0 = "#6c7086"
surface2 = "#585b70"
surface1 = "#45475a"
surface0 = "#313244"
base = "#1e1e2e"
mantle = "#181825"
crust = "#11111b"

color_ok = 'bright-green'
color_danger = 'bright-red'
color_caution = 'bright-yellow'

color_username = ''
color_directory = 'bright-blue'
color_prepo = 'blue'
color_repo = '#89dceb'
color_git_bracket = '#74c7ec'
color_git_remote_symbol = '#74c7ec'
color_git_username = '#74c7ec'
color_git_remote_url = '#74c7ec'
color_git_remote_repo = '#89dceb'
color_git_equal = '#585b70'
color_env = 'yellow'
color_kubernetes = 'purple'
color_docker = 'blue'
color_shell = 'black'
color_container = ''
color_other = ''
color_time = '#b4befe'
color_duration = ''
color_os = 'blue'
color_git = 'purple'
color_git_branch = '#cba6f7'
# color_git_branch = '#6c7086'
color_git_added = 'bright-green'
color_git_deleted = 'bright-red'
color_vimcmd_ok = 'black'
color_vimcmd_replace = 'yellow'
color_vimcmd_visual = 'purple'
color_btry_bg = '#181825'
# color_fill = '#303446'
# color_fill = '#24273a'
color_fill = '#1e1e2e'
color_lua = '#74c7ec'

[time]
disabled = true
time_format = "%-I:%M%P"
style = "fg:color_time"
format = '( [$time]($style) )'
# format = '( [ $time]($style) )'

[custom.btry]
disabled = true
command = "btry"
style = "bg:color_btry_bg"
# when = "true"
when = """ test "$BTRY" = "on" """
shell = "bash"
format = '[](fg:color_btry_bg)[ $output]($style)'

# [custom.btryicon]
# command = "btry -i"
# style = "bg:color_btry_bg"
# # when = "true"
# when = """ test "$BTRY" = "on" """
# shell = "bash"
# format = '[$output]($style)'

# [battery]
# disabled = true

[cmd_duration]
# format = "([](black) [󱦟 ](yellow)[$duration]($style))"
format = "([](bright-black)[ $duration]($style))"
style = "bright-black"
disabled = true

[username]
style_user = 'white'
style_root = 'white bold'
format = '[$user]($style)'
disabled = true
show_always = true
# aliases = { "Administrator" = "admin" }

[hostname]
ssh_only = true
format = '([@](white)[$hostname](white))[:](bright-white dimmed)([$ssh_symbol ](style))'
style = "bright-white"
# trim_at = '.companyname.com'
trim_at = "-"
disabled = false
ssh_symbol = "  "

[env_var.AdminSymbol]
variable = 'AdminSymbol'
# format = "[$env_value󱐌]($style)"
format = "[󱐌]($style)"
style = "white dimmed"
disabled = true

[fill]
disabled = true
symbol = '󰍴'
style = 'fg:color_fill'

[directory]
style = 'fg:color_directory'
truncate_to_repo = true
truncation_length = 10
fish_style_pwd_dir_length = 1
# before_repo_root_style = 'fg:color_prepo'
repo_root_style = "fg:color_repo bold"
# truncation_symbol = "…/"
read_only = " "
home_symbol = "~"
use_os_path_sep = false
use_logical_path = false
read_only_style = 'fg:color_directory dimmed'
repo_root_format = ""
# format = "[ $path ]($style)"
# format = "[ [$before_root_path]($before_repo_root_style)[$repo_root]($repo_root_style)$path(cyan)[$read_only]($read_only_style<) ]($style)"
# repo_root_format = "[ [$before_root_path]($before_repo_root_style)[$repo_root]($repo_root_style)$path[$read_only]($read_only_style<) ]($style)"

[git_branch]
symbol = ''
format = '[($symbol$branch )]($style)'
style = 'fg:color_git_branch'

[git_commit]
style = "fg:color_git"
format = "([($tag)(@$hash)]($style) )"
commit_hash_length = 7
only_detached = true
tag_symbol = "󰓼 "
tag_disabled = false
disabled = false

[git_status]
style = "fg:color_git"
format = '([$ahead_behind]($style) )([$all_status]($style) )'
stashed = "*${count}"
ahead = "⇡${count}"
behind = "⇣${count}"
up_to_date = ""
diverged = "⇡${ahead_count}⇣${behind_count}"
conflicted = "=${count}"
deleted = "×${count}"
renamed = "»${count}"
modified = "!${count}"
staged = "+${count}"
untracked = "?${count}"
ignore_submodules = false
disabled = false

[git_metrics]
format = '([([+$added]($added_style))([-$deleted]($deleted_style))](fg:color_git) )'
added_style = "fg:color_git_added"
deleted_style = "fg:color_git_deleted"
only_nonzero_diffs = true
disabled = true

[git_state]
style = "fg:color_danger"
format = '([$state( $progress_current/$progress_total)]($style bold) )'
rebase = "REBASING"
merge = "MERGING"
revert = "REVERTING"
cherry_pick = "CHERRY-PICKING"
bisect = "BISECTING"
am = "AM"
am_or_rebase = "AM/REBASE"
disabled = false

[nodejs]
detect_files = ['package.json']
detect_folders = []
symbol = '󰎙 '
style = 'green'
version_format = '${raw}'
format = '([${symbol}([$version](Bright-green)) ]($style))'
disabled = false

[lua]
detect_folders = []
style = 'fg:color_lua'
symbol = " "
format = '([${symbol}([$version](fg:color_lua)) ]($style))'

[python]
# format = '([\[](bright-black)[${symbol}([$version](green))]($style)[\]](bright-black))'
format = '([${symbol}([$version](bright-yellow)) ]($style))'
style = "yellow"
symbol = '󰌠 '
pyenv_version_name = true

[rust]
format = '([${symbol}([$version](red)) ]($style))'
style = 'bright-red'
symbol = '󱘗 '

[os]
disabled = true
style = "fg:color_os"
format = '[$symbol ]($style)'

[os.symbols]
Alpaquita = ""
Alpine = ""
AlmaLinux = ""
Amazon = ""
Android = ""
# Android = ""
Arch = ""
Artix = ""
CentOS = ""
Debian = ""
DragonFly = ""
Emscripten = ""
EndeavourOS = ""
Fedora = ""
FreeBSD = ""
Garuda = "󰛓"
Gentoo = ""
HardenedBSD = "󰞌"
Illumos = "󰈸"
Kali = " "
Linux = ""
Mabox = ""
Macos = ""
Manjaro = ""
Mariner = ""
MidnightBSD = ""
Mint = ""
NetBSD = ""
NixOS = ""
OpenBSD = "󰈺"
openSUSE = ""
OracleLinux = "󰌷"
Pop = ""
Raspbian = ""
Redhat = ""
RedHatEnterprise = ""
RockyLinux = ""
Redox = "󰀘"
Solus = "󰠳"
SUSE = ""
Ubuntu = ""
Unknown = ""
Void = ""
# Windows = "󰍲"
Windows = "󰚌"
# Windows = ""
# Windows = "󰖳"
# Windows = ""

[package]
symbol = "󰏗 "

[perl]
symbol = " "

[php]
symbol = " "

[pijul_channel]
symbol = " "

[rlang]
symbol = "󰟔 "

[ruby]
symbol = " "

[scala]
symbol = " "

[swift]
symbol = " "

[zig]
symbol = " "

[gradle]
symbol = " "

[aws]
symbol = "  "

[buf]
symbol = " "

[c]
symbol = " "

[crystal]
symbol = " "

[dart]
symbol = " "

[docker_context]
symbol = " "

[elixir]
symbol = " "

[elm]
symbol = " "

[fennel]
symbol = " "

[fossil_branch]
symbol = " "

[golang]
symbol = " "

[guix_shell]
symbol = " "

[haskell]
symbol = " "

[haxe]
symbol = " "

[hg_branch]
symbol = " "

[java]
symbol = " "

[julia]
symbol = " "

[kotlin]
symbol = " "

[memory_usage]
symbol = "󰍛 "

[meson]
symbol = "󰔷 "

[nim]
symbol = "󰆥 "

[nix_shell]
symbol = " "

[ocaml]
symbol = " "

[line_break]
disabled = false

# [shell]
# format = '[$indicator]($style)'
# fish_indicator = ''
# powershell_indicator = 'PS'
# bash_indicator = ''
# zsh_indicator = ''
# cmd_indicator = ''
# unknown_indicator = ''
# style = 'bg:none fg:cyan'
# disabled = true

[character]
success_symbol = '[](fg:color_ok bold)'
error_symbol = '[](fg:color_danger bold)'
vimcmd_symbol = '[󰅂](fg:color_vimcmd_ok)'
vimcmd_replace_one_symbol = '[󰅂](fg:color_vimcmd_replace)'
vimcmd_replace_symbol = '[󰅂](fg:color_vimcmd_replace)'
vimcmd_visual_symbol = '[󰅂](fg:color_vimcmd_visual)'
format = '$symbol '

[directory.substitutions]
# "~/Desktop" = " Desktop"
# "~/Videos" = " Videos"
# "~/Pictures" = " Pictures"
# "~/Music" = " Music"
# "~/Documents" = " Documents"
# "~/Downloads" = "󰇚 Downloads"
"C:/" = "/"

[custom.git_remote_symbol-pwsh]
description = "Display symbol for remote Git server (pwsh)"
command = 'git_remote_icon.ps1'
require_repo = true
shell = ["pwsh", "-NoProfile", "-Command", "-"]
when = "git rev-parse --is-inside-work-tree"
format = '[$output]($style)'
style = "fg:color_git_remote_symbol"
os = "windows"


[custom.git_remote_symbol-bash]
description = "Display symbol for remote Git server (bash)"
command = 'git_remote_icon.sh'
require_repo = true
shell = ["bash", "--noprofile", "--norc"]
when = 'git rev-parse --is-inside-work-tree'
format = '[$output]($style)'
style = "fg:color_git_remote_symbol"
os = "linux"

[custom.git_username]
description = 'Git username'
require_repo = true
when = 'git rev-parse --is-inside-work-tree'
command = """
GIT_USERNAME=$(command git config --get user.name 2> /dev/null)

echo "$GIT_USERNAME"
"""
format = '[$output]($style)'
shell = ["bash", "--noprofile", "--norc"]
style = "fg:color_git_username"

[custom.git_remote_url]
description = 'Remote git repository url'
require_repo = true
when = 'git rev-parse --is-inside-work-tree'
command = """
GIT_REMOTE=$(command git remote get-url origin 2> /dev/null)
if [[ -z "$GIT_REMOTE" ]]; then
GIT_REMOTE=$(command git ls-remote --get-url 2> /dev/null)
fi
GIT_REMOTE_URL=$(echo $GIT_REMOTE | sed -E 's/^https?:\\/\\/(.+@)?//; s/\\.git$//;  s/\\.git$//; s/.+@(.+):([[:digit:]]+)\\/(.+)$/\\1\\/\\3/; s/.+@(.+):(.+)$/\\1\\/\\2/; s/\\/$//')

REPO_BASE=$(echo $GIT_REMOTE_URL | sed 's:/[^/]*$::')

echo "$REPO_BASE/"
"""
format = '[$output]($style)'
shell = ["bash", "--noprofile", "--norc"]
style = "fg:color_git_remote_url"

[custom.git_remote_repo]
description = 'Remote git repository name'
require_repo = true
when = 'git rev-parse --is-inside-work-tree'
command = """
GIT_REMOTE=$(command git remote get-url origin 2> /dev/null)
if [[ -z "$GIT_REMOTE" ]]; then
GIT_REMOTE=$(command git ls-remote --get-url 2> /dev/null)
fi
GIT_REMOTE_URL=$(echo $GIT_REMOTE | sed -E 's/^https?:\\/\\/(.+@)?//; s/\\.git$//;  s/\\.git$//; s/.+@(.+):([[:digit:]]+)\\/(.+)$/\\1\\/\\3/; s/.+@(.+):(.+)$/\\1\\/\\2/; s/\\/$//')

REPO_NAME=$(echo $GIT_REMOTE_URL | sed -E 's/.+\\/([^\\/]+)$/\\1/')
REPO_ROOT_DIR=$(command git rev-parse --show-toplevel)
REPO_ROOT=$(command basename "$REPO_ROOT_DIR")

if [[ $REPO_ROOT == "$REPO_NAME" ]]; then
    REPO_NAME=""
else
    REPO_NAME="$REPO_NAME"
fi

echo "$REPO_NAME"
"""
format = '[$output]($style)'
shell = ["bash", "--noprofile", "--norc"]
style = "fg:color_git_remote_url"

[custom.git_local]
description = 'Remote git repository name'
require_repo = true
when = 'git rev-parse --is-inside-work-tree'
command = """
REPO_ROOT_DIR=$(command git rev-parse --show-toplevel)
REPO_ROOT=$(command basename "$REPO_ROOT_DIR")

echo "$REPO_ROOT"
"""
format = '[$output]($style)'
shell = ["bash", "--noprofile", "--norc"]
style = "fg:color_git_remote_repo bold"


[custom.git_before]
description = 'path before repo'
require_repo = true
when = 'git rev-parse --is-inside-work-tree'
command = """
GIT_BEFORE_REPO=$(command dirname $(git rev-parse --show-toplevel))
if [[ "$GIT_BEFORE_REPO" =~ "/mnt/c/Users/$USERNAME" ]]; then
  GIT_BEFORE_REPO=$(echo "$GIT_BEFORE_REPO" | sed "s|^/mnt/c/Users/$USERNAME|~|")
elif [[ "$GIT_BEFORE_REPO" =~ "C:/Users/$USERNAME" ]]; then
  GIT_BEFORE_REPO=$(echo "$GIT_BEFORE_REPO" | sed "s|^C:/Users/$USERNAME|~|")
elif [[ "$GIT_BEFORE_REPO" =~ "/Users/$USERNAME" ]]; then
  GIT_BEFORE_REPO=$(echo "$GIT_BEFORE_REPO" | sed "s|^/Users/$USERNAME|~|")
else
  GIT_BEFORE_REPO=$(echo "$GIT_BEFORE_REPO" | sed "s|^$HOME|~|")
fi

echo "$GIT_BEFORE_REPO/"
"""
format = '[$output]($style)'
shell = ["bash", "--noprofile", "--norc"]
style = "fg:color_prepo"

[custom.git_prefix]
description = 'repo prefix'
require_repo = true
when = 'git rev-parse --is-inside-work-tree'
command = """
GIT_PREFIX=$(command git rev-parse --show-prefix | sed 's:/*$::')
echo "$GIT_PREFIX"
"""
format = '[$output]($style)'
shell = ["bash", "--noprofile", "--norc"]
style = "fg:color_repo"
